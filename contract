// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract UniqueToken {
    // Public variables to store the token details
    string public name;
    string public symbol;
    uint256 public totalSupply;

    // Mapping to keep track of each address's balance
    mapping(address => uint256) public balances;

    // Constructor to initialize the token details
    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
        totalSupply = 0; // Initial total supply is 0
    }

    // Function to mint new tokens
    function mint(address to, uint256 amount) public {
        _requireValidAmount(amount);
        totalSupply += amount; // Increase the total supply
        balances[to] += amount; // Increase the recipient's balance
        emit Transfer(address(0), to, amount); // Emit a transfer event from the zero address
    }

    // Function to burn tokens
    function burn(address from, uint256 amount) public {
        _requireValidAmount(amount);
        _requireSufficientBalance(from, amount);
        totalSupply -= amount; // Decrease the total supply
        balances[from] -= amount; // Decrease the holder's balance
        emit Transfer(from, address(0), amount); // Emit a transfer event to the zero address
    }

    // Internal function to validate the amount
    function _requireValidAmount(uint256 amount) internal pure {
        require(amount > 0, "Amount must be greater than zero");
    }

    // Internal function to check if an address has sufficient balance
    function _requireSufficientBalance(address account, uint256 amount) internal view {
        require(balances[account] >= amount, "Insufficient balance");
    }

    // Function to transfer tokens from one address to another
    function transfer(address from, address to, uint256 amount) public {
        _requireValidAmount(amount);
        _requireSufficientBalance(from, amount);

        uint256 previousBalanceFrom = balances[from];
        uint256 previousBalanceTo = balances[to];

        balances[from] -= amount;
        balances[to] += amount;

        assert(balances[from] == previousBalanceFrom - amount); // Ensure the balances are correctly updated
        assert(balances[to] == previousBalanceTo + amount);

        emit Transfer(from, to, amount); // Emit a transfer event
    }

    // Function to demonstrate revert usage
    function disableFunction() public pure {
        revert("This function is disabled"); // Revert with an error message
    }

    // Event to log token transfers
    event Transfer(address indexed from, address indexed to, uint256 value);
}

