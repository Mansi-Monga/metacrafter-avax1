// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract DecentralizedLibrary {
    struct Book {
        string title;
        string author;
        bool isAvailable;
    }

    struct User {
        bool isRegistered;
        uint8 borrowedBooks;
    }

    address public manager;
    Book[] public books;
    mapping(address => User) public users;
    uint8 public constant maxBorrowedBooks = 3;

    event BookAdded(uint256 bookId, string title, string author);
    event BookBorrowed(address indexed user, uint256 bookId);
    event BookReturned(address indexed user, uint256 bookId);
    event UserRegistered(address indexed user);

    modifier onlyManager() {
        require(msg.sender == manager, "Only the manager can call this function");
        _;
    }

    modifier isRegisteredUser() {
        require(users[msg.sender].isRegistered, "User is not registered");
        _;
    }

    modifier validBookId(uint256 bookId) {
        require(bookId < books.length, "Invalid book ID");
        _;
    }

    modifier bookAvailable(uint256 bookId) {
        require(books[bookId].isAvailable, "Book is not available");
        _;
    }

    constructor() {
        manager = msg.sender;
    }

    function registerUser() public {
        require(!users[msg.sender].isRegistered, "User already registered");

        users[msg.sender] = User(true, 0);

        emit UserRegistered(msg.sender);
    }

    function addBook(string memory _title, string memory _author) public onlyManager {
        books.push(Book(_title, _author, true));
        emit BookAdded(books.length - 1, _title, _author);
    }

    function borrowBook(uint256 bookId) public isRegisteredUser validBookId(bookId) bookAvailable(bookId) {
        User storage user = users[msg.sender];
        require(user.borrowedBooks < maxBorrowedBooks, "User has reached the maximum number of borrowed books");

        books[bookId].isAvailable = false;
        user.borrowedBooks++;
        
        emit BookBorrowed(msg.sender, bookId);
    }

    function returnBook(uint256 bookId) public isRegisteredUser validBookId(bookId) {
        User storage user = users[msg.sender];
        require(!books[bookId].isAvailable, "Book is already available");

        books[bookId].isAvailable = true;
        user.borrowedBooks--;

        emit BookReturned(msg.sender, bookId);
    }

    function checkInvariants() public view {
        // Ensure the manager address is not zero
        assert(manager != address(0));

        // Ensure no book is over-borrowed
        for (uint256 i = 0; i < books.length; i++) {
            if (!books[i].isAvailable) {
                assert(users[msg.sender].borrowedBooks > 0);
            }
        }
    }
}
